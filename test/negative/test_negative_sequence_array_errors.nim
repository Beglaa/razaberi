## Comprehensive Negative Tests: Sequence and Array Pattern Errors
##
## This test suite validates that sequence/array patterns with errors cause
## compilation failures with helpful error messages from the pattern validation module.
##
## Test Coverage:
## 1. Fixed array size mismatches (too many/too few elements)
## 2. Array spread patterns with too many fixed elements
## 3. Element type mismatches (literal patterns with wrong types)
## 4. Nested pattern errors (type mismatches in nested structures)
## 5. Mixed element patterns with errors
## 6. Empty array patterns
##
## Tests validate error messages generated by:
## - `validateSequencePattern` in pattern_validation.nim
## - `generateElementCountError` for size mismatches
## - `generateLiteralTypeMismatchError` for type errors

import unittest
import ../../pattern_matching
import ../helper/ccheck

# ============================================================================
# SUITE 1: Fixed Array Size Mismatches - Too Many Elements
# ============================================================================

suite "Negative Tests: Array Too Many Elements":

  test "array[3] with 4-element pattern should not compile":
    check shouldNotCompile (
      let arr: array[3, int] = [1, 2, 3]
      match arr:
        [a, b, c, d]: a + b + c + d  # 4 elements for 3-element array
        _: 0
    )

  test "array[2] with 3-element pattern should not compile":
    check shouldNotCompile (
      let arr: array[2, int] = [10, 20]
      match arr:
        [x, y, z]: x + y + z  # 3 elements for 2-element array
        _: 0
    )

  test "array[5] with 6-element pattern should not compile":
    check shouldNotCompile (
      let arr: array[5, int] = [1, 2, 3, 4, 5]
      match arr:
        [a, b, c, d, e, f]: a + b + c + d + e + f  # 6 elements for 5-element array
        _: 0
    )

  test "array[1] with 2-element pattern should not compile":
    check shouldNotCompile (
      let arr: array[1, int] = [42]
      match arr:
        [x, y]: x + y  # 2 elements for 1-element array
        _: 0
    )

  test "array[10] with 11-element pattern should not compile":
    check shouldNotCompile (
      let arr: array[10, int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      match arr:
        [a, b, c, d, e, f, g, h, i, j, k]: a + b + c + d + e + f + g + h + i + j + k
        _: 0
    )

# ============================================================================
# SUITE 2: Fixed Array Size Mismatches - Too Few Elements
# ============================================================================

suite "Negative Tests: Array Too Few Elements":

  test "array[3] with 2-element pattern should not compile":
    check shouldNotCompile (
      let arr: array[3, int] = [1, 2, 3]
      match arr:
        [a, b]: a + b  # 2 elements for 3-element array
        _: 0
    )

  test "array[4] with 3-element pattern should not compile":
    check shouldNotCompile (
      let arr: array[4, int] = [1, 2, 3, 4]
      match arr:
        [a, b, c]: a + b + c  # 3 elements for 4-element array
        _: 0
    )

  test "array[5] with 3-element pattern should not compile":
    check shouldNotCompile (
      let arr: array[5, int] = [1, 2, 3, 4, 5]
      match arr:
        [a, b, c]: a + b + c  # 3 elements for 5-element array
        _: 0
    )

  test "array[2] with 1-element pattern should not compile":
    check shouldNotCompile (
      let arr: array[2, int] = [10, 20]
      match arr:
        [x]: x  # 1 element for 2-element array
        _: 0
    )

  test "array[10] with 5-element pattern should not compile":
    check shouldNotCompile (
      let arr: array[10, int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      match arr:
        [a, b, c, d, e]: a + b + c + d + e  # 5 elements for 10-element array
        _: 0
    )

# ============================================================================
# SUITE 3: Array Spread Patterns with Too Many Fixed Elements
# ============================================================================

suite "Negative Tests: Array Spread with Too Many Fixed Elements":

  test "array[3] with spread + 4 fixed elements should not compile":
    check shouldNotCompile (
      let arr: array[3, int] = [1, 2, 3]
      match arr:
        [a, b, c, d, *rest]: a + b + c + d  # 4 fixed + spread for 3-element array
        _: 0
    )

  test "array[2] with spread + 3 fixed elements should not compile":
    check shouldNotCompile (
      let arr: array[2, int] = [10, 20]
      match arr:
        [x, y, z, *rest]: x + y + z  # 3 fixed + spread for 2-element array
        _: 0
    )

  test "array[5] with spread + 6 fixed elements should not compile":
    check shouldNotCompile (
      let arr: array[5, int] = [1, 2, 3, 4, 5]
      match arr:
        [a, b, c, d, e, f, *rest]: a + b + c  # 6 fixed + spread for 5-element array
        _: 0
    )

  test "array[4] with spread + 5 fixed elements should not compile":
    check shouldNotCompile (
      let arr: array[4, int] = [1, 2, 3, 4]
      match arr:
        [*init, a, b, c, d, e]: a + b  # 5 fixed + spread for 4-element array
        _: 0
    )

  test "array[3] with spread + mixed position fixed (too many) should not compile":
    check shouldNotCompile (
      let arr: array[3, int] = [1, 2, 3]
      match arr:
        [a, b, *middle, c, d]: a + b + c + d  # 4 fixed + spread for 3-element array
        _: 0
    )

# ============================================================================
# SUITE 4: Element Type Mismatches
# ============================================================================

suite "Negative Tests: Array Element Type Mismatches":

  test "int array with string literal pattern should not compile":
    check shouldNotCompile (
      let arr: array[3, int] = [1, 2, 3]
      match arr:
        [1, "hello", 3]: "matched"  # string literal in int array
        _: ""
    )

  test "string array with int literal pattern should not compile":
    check shouldNotCompile (
      let arr: array[2, string] = ["hello", "world"]
      match arr:
        ["hello", 42]: "matched"  # int literal in string array
        _: ""
    )

  test "float array with string literal pattern should not compile":
    check shouldNotCompile (
      let arr: array[2, float] = [1.5, 2.5]
      match arr:
        [1.5, "wrong"]: "matched"  # string literal in float array
        _: ""
    )

  test "bool array with int literal pattern should not compile":
    check shouldNotCompile (
      let arr: array[2, bool] = [true, false]
      match arr:
        [true, 1]: "matched"  # int literal in bool array
        _: ""
    )

  test "char array with string literal pattern should not compile":
    check shouldNotCompile (
      let arr: array[2, char] = ['a', 'b']
      match arr:
        ['a', "b"]: "matched"  # string literal in char array
        _: ""
    )

# ============================================================================
# SUITE 5: Nested Sequence Pattern Errors
# ============================================================================

suite "Negative Tests: Nested Sequence Pattern Type Errors":

  test "nested int arrays with string literal in inner array should not compile":
    check shouldNotCompile (
      let arr: array[2, array[2, int]] = [[1, 2], [3, 4]]
      match arr:
        [[1, 2], [3, "wrong"]]: "matched"  # string literal in inner int array
        _: ""
    )

  test "nested sequences with wrong outer size should not compile":
    check shouldNotCompile (
      let arr: array[2, array[2, int]] = [[1, 2], [3, 4]]
      match arr:
        [[1, 2], [3, 4], [5, 6]]: "matched"  # 3 outer elements for 2-element array
        _: ""
    )

  test "nested sequences with wrong inner size should not compile":
    check shouldNotCompile (
      let arr: array[2, array[2, int]] = [[1, 2], [3, 4]]
      match arr:
        [[1, 2, 3], [3, 4]]: "matched"  # 3 inner elements for 2-element inner array
        _: ""
    )

  test "deeply nested arrays with type mismatch at depth 3 should not compile":
    check shouldNotCompile (
      let arr: array[2, array[2, array[2, int]]] = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]
      match arr:
        [[[1, 2], [3, 4]], [[5, 6], [7, "wrong"]]]: "matched"  # string at depth 3
        _: ""
    )

# ============================================================================
# SUITE 6: Mixed Element Patterns with Errors
# ============================================================================

suite "Negative Tests: Mixed Element Pattern Errors":

  test "array with mixed types (literals + variables) but wrong literal type should not compile":
    check shouldNotCompile (
      let arr: array[3, int] = [1, 2, 3]
      match arr:
        [1, "wrong", x]: $x  # string literal in int array
        _: ""
    )

  test "array with wildcard + wrong literal type should not compile":
    check shouldNotCompile (
      let arr: array[3, int] = [1, 2, 3]
      match arr:
        [_, "wrong", _]: "matched"  # string literal in int array
        _: ""
    )

  test "array with guards but wrong literal type should not compile":
    check shouldNotCompile (
      let arr: array[2, int] = [10, 20]
      match arr:
        ["wrong" and x > 5, y]: $y  # string literal with guard in int array
        _: ""
    )

# ============================================================================
# SUITE 7: Empty Array Patterns
# ============================================================================

suite "Negative Tests: Empty Array Patterns":

  test "array[1] with empty pattern should not compile":
    check shouldNotCompile (
      let arr: array[1, int] = [42]
      match arr:
        []: "empty"  # 0 elements for 1-element array
        _: ""
    )

  test "array[3] with empty pattern should not compile":
    check shouldNotCompile (
      let arr: array[3, int] = [1, 2, 3]
      match arr:
        []: "empty"  # 0 elements for 3-element array
        _: ""
    )

  test "array[10] with empty pattern should not compile":
    check shouldNotCompile (
      let arr: array[10, int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      match arr:
        []: "empty"  # 0 elements for 10-element array
        _: ""
    )

# ============================================================================
# SUITE 8: Extreme Mismatches
# ============================================================================

suite "Negative Tests: Extreme Array Size Mismatches":

  test "array[1] with 10-element pattern should not compile":
    check shouldNotCompile (
      let arr: array[1, int] = [1]
      match arr:
        [a, b, c, d, e, f, g, h, i, j]: a + b + c + d + e + f + g + h + i + j
        _: 0
    )

  test "array[10] with 1-element pattern should not compile":
    check shouldNotCompile (
      let arr: array[10, int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      match arr:
        [a]: a  # 1 element for 10-element array
        _: 0
    )

  test "array[5] with 20-element pattern should not compile":
    check shouldNotCompile (
      let arr: array[5, int] = [1, 2, 3, 4, 5]
      match arr:
        [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t]: a + b
        _: 0
    )

# ============================================================================
# SUITE 9: Sequence Pattern Validation (Sequences Accept Any Size)
# ============================================================================

suite "Positive Control: Sequence Pattern Flexibility":

  test "sequence can have fewer elements than pattern (runtime match)":
    # Sequences should NOT cause compile errors for size mismatches
    # (runtime matching determines if pattern matches)
    check shouldCompile (
      let s = @[1, 2]
      match s:
        [a, b, c]: a + b + c  # Runtime: no match, falls through
        _: 0
    )

  test "sequence with spread accepts any size at compile time":
    check shouldCompile (
      let s = @[1]
      match s:
        [a, b, *rest]: a + b  # Runtime: no match if fewer elements
        _: 0
    )

  test "sequence with many elements and small pattern compiles":
    check shouldCompile (
      let s = @[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      match s:
        [a]: a  # Runtime match: extracts first element
        _: 0
    )

# ============================================================================
# SUITE 10: Type Mismatches with Nested Structures
# ============================================================================

suite "Negative Tests: Complex Nested Type Mismatches":

  test "array of tuples with wrong tuple element type should not compile":
    check shouldNotCompile (
      let arr: array[2, (int, string)] = [(1, "a"), (2, "b")]
      match arr:
        [(1, "a"), (2, 42)]: "matched"  # int instead of string in second tuple
        _: ""
    )

  test "array of arrays with wrong inner array element type should not compile":
    check shouldNotCompile (
      let arr: array[2, array[2, int]] = [[1, 2], [3, 4]]
      match arr:
        [[1, 2.5], [3, 4]]: "matched"  # float instead of int in first inner array
        _: ""
    )

# ============================================================================
# SUITE 11: Edge Cases with Special Values
# ============================================================================

suite "Negative Tests: Edge Cases with Special Values":

  test "array with nil literal in non-ref type should not compile":
    check shouldNotCompile (
      let arr: array[2, int] = [1, 2]
      match arr:
        [1, nil]: "matched"  # nil in int array
        _: ""
    )

  test "array with wrong boolean literal should not compile for int array":
    check shouldNotCompile (
      let arr: array[2, int] = [1, 2]
      match arr:
        [1, true]: "matched"  # bool literal in int array
        _: ""
    )

# ============================================================================
# SUITE 12: Spread Pattern Position Validation
# ============================================================================

suite "Negative Tests: Spread Pattern Validation":

  test "array with spread but too many fixed elements before spread should not compile":
    check shouldNotCompile (
      let arr: array[3, int] = [1, 2, 3]
      match arr:
        [a, b, c, d, *rest]: a + b + c + d  # 4 elements before spread in 3-element array
        _: 0
    )

  test "array with spread but too many fixed elements after spread should not compile":
    check shouldNotCompile (
      let arr: array[3, int] = [1, 2, 3]
      match arr:
        [*init, a, b, c, d]: a + b + c + d  # 4 elements after spread in 3-element array
        _: 0
    )

  test "array with spread in middle but too many total fixed elements should not compile":
    check shouldNotCompile (
      let arr: array[4, int] = [1, 2, 3, 4]
      match arr:
        [a, b, *middle, c, d, e]: a + b + c  # 5 fixed elements total in 4-element array
        _: 0
    )
