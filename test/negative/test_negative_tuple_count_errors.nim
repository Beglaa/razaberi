## Negative Tests: Tuple Element Count Errors
##
## This test suite validates that tuple patterns with incorrect element counts
## cause compilation errors with helpful error messages.
##
## Tests validate the error messages generated by `generateElementCountError` in pattern_validation.nim
## Expected error format:
##   - "Tuple element count mismatch:"
##   - "Pattern has: X elements"
##   - "Tuple has: Y elements"
##   - Fix suggestions (add/remove elements)
##   - Pattern representation
##   - Example patterns

import unittest
import ../../pattern_matching
import ../helper/ccheck

# ============================================================================
# SUITE 1: Too Many Elements - Pattern Has More Than Tuple
# ============================================================================

suite "Negative Tests: Tuple Too Many Elements":

  test "2-tuple with 3-element pattern should not compile":
    check shouldNotCompile (
      let tup = (1, 2)
      let result = match tup:
        (a, b, c): a + b + c  # 3 elements for 2-tuple
        _: 0
    )

  test "2-tuple with 4-element pattern should not compile":
    check shouldNotCompile (
      let tup = (1, 2)
      let result = match tup:
        (a, b, c, d): a + b + c + d  # 4 elements for 2-tuple
        _: 0
    )

  test "3-tuple with 4-element pattern should not compile":
    check shouldNotCompile (
      let tup = (1, "hello", 3.14)
      let result = match tup:
        (a, b, c, d): $a & b & $c & $d  # 4 elements for 3-tuple
        _: ""
    )

  test "3-tuple with 5-element pattern should not compile":
    check shouldNotCompile (
      let tup = (1, "hello", 3.14)
      let result = match tup:
        (a, b, c, d, e): $a & b & $c & $d & $e  # 5 elements for 3-tuple
        _: ""
    )

  test "1-tuple with 2-element pattern should not compile":
    check shouldNotCompile (
      let tup = (42,)
      let result = match tup:
        (a, b): a + b  # 2 elements for 1-tuple
        _: 0
    )

  test "5-tuple with 6-element pattern should not compile":
    check shouldNotCompile (
      let tup = (1, 2, 3, 4, 5)
      let result = match tup:
        (a, b, c, d, e, f): a + b + c + d + e + f  # 6 elements for 5-tuple
        _: 0
    )

  test "large tuple: 10-tuple with 11-element pattern should not compile":
    check shouldNotCompile (
      let tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
      let result = match tup:
        (a, b, c, d, e, f, g, h, i, j, k): a + b + c + d + e + f + g + h + i + j + k
        _: 0
    )

# ============================================================================
# SUITE 2: Too Few Elements - Pattern Has Less Than Tuple
# ============================================================================

suite "Negative Tests: Tuple Too Few Elements":

  test "3-tuple with 2-element pattern should not compile":
    check shouldNotCompile (
      let tup = (1, "hello", 3.14)
      let result = match tup:
        (a, b): $a & b  # 2 elements for 3-tuple
        _: ""
    )

  test "3-tuple with 1-element pattern should not compile":
    check shouldNotCompile (
      let tup = (1, "hello", 3.14)
      let result = match tup:
        (a): $a  # 1 element for 3-tuple
        _: ""
    )

  test "4-tuple with 3-element pattern should not compile":
    check shouldNotCompile (
      let tup = (1, 2, 3, 4)
      let result = match tup:
        (a, b, c): a + b + c  # 3 elements for 4-tuple
        _: 0
    )

  test "5-tuple with 3-element pattern should not compile":
    check shouldNotCompile (
      let tup = (1, 2, 3, 4, 5)
      let result = match tup:
        (a, b, c): a + b + c  # 3 elements for 5-tuple
        _: 0
    )

  test "2-tuple with 1-element pattern should not compile":
    check shouldNotCompile (
      let tup = (1, 2)
      let result = match tup:
        (a): a  # 1 element for 2-tuple
        _: 0
    )

  test "large tuple: 10-tuple with 9-element pattern should not compile":
    check shouldNotCompile (
      let tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
      let result = match tup:
        (a, b, c, d, e, f, g, h, i): a + b + c + d + e + f + g + h + i  # 9 elements for 10-tuple
        _: 0
    )

# ============================================================================
# SUITE 3: Edge Cases with Default Values
# ============================================================================

suite "Negative Tests: Tuple Count with Default Values":

  test "2-tuple with 3 patterns (one with default) should compile - extra has default":
    # This SHOULD compile because the extra element has a default value
    check shouldCompile (
      let tup = (1, 2)
      let result = match tup:
        (a, b, c = 999): a + b + c  # 3 patterns, but last has default - OK!
        _: 0
    )

  test "3-tuple with 4 patterns (one with default) should compile - extra has default":
    # This SHOULD compile because the extra element has a default value
    check shouldCompile (
      let tup = (1, 2, 3)
      let result = match tup:
        (a, b, c, d = 999): a + b + c + d  # 4 patterns, but last has default - OK!
        _: 0
    )

  test "2-tuple with 4 patterns (two with defaults) should compile - extras have defaults":
    # This SHOULD compile because extra elements have default values
    check shouldCompile (
      let tup = (1, 2)
      let result = match tup:
        (a, b, c = 10, d = 20): a + b + c + d  # 4 patterns, but last 2 have defaults - OK!
        _: 0
    )

  test "2-tuple with 3 patterns (NO defaults) should not compile":
    # Without defaults, this should fail
    check shouldNotCompile (
      let tup = (1, 2)
      let result = match tup:
        (a, b, c): a + b + c  # 3 patterns, NO defaults - FAIL!
        _: 0
    )

  test "3-tuple with 5 patterns (only 1 has default) should not compile":
    # Even with 1 default, we still have 4 required elements for 3-tuple
    check shouldNotCompile (
      let tup = (1, 2, 3)
      let result = match tup:
        (a, b, c, d, e = 999): a + b + c + d + e  # 4 required for 3-tuple - FAIL!
        _: 0
    )

  test "1-tuple with 3 patterns (only 1 has default) should not compile":
    # Even with 1 default, we still have 2 required elements for 1-tuple
    check shouldNotCompile (
      let tup = (42,)
      let result = match tup:
        (a, b, c = 999): a + b + c  # 2 required for 1-tuple - FAIL!
        _: 0
    )

# ============================================================================
# SUITE 4: Mixed Types and Literals
# ============================================================================

suite "Negative Tests: Tuple Count with Mixed Patterns":

  test "3-tuple with 4 mixed element patterns should not compile":
    check shouldNotCompile (
      let tup = (1, "hello", 3.14)
      let result = match tup:
        (1, "hello", 3.14, extra): $extra  # 4 elements for 3-tuple
        _: ""
    )

  test "2-tuple with 3 wildcard patterns should not compile":
    check shouldNotCompile (
      let tup = (1, 2)
      let result = match tup:
        (_, _, _): "matched"  # 3 wildcards for 2-tuple
        _: ""
    )

  test "3-tuple with 2 variable bindings should not compile":
    check shouldNotCompile (
      let tup = (1, "hello", 3.14)
      let result = match tup:
        (x, y): $x & $y  # 2 bindings for 3-tuple
        _: ""
    )

  test "4-tuple with 5 literal patterns should not compile":
    check shouldNotCompile (
      let tup = (1, 2, 3, 4)
      let result = match tup:
        (1, 2, 3, 4, 5): "matched"  # 5 literals for 4-tuple
        _: ""
    )

# ============================================================================
# SUITE 5: Nested Tuples (Element Count in Outer Tuple)
# ============================================================================

suite "Negative Tests: Nested Tuple Outer Count Errors":

  test "nested 2-tuple outer with 3 elements should not compile":
    check shouldNotCompile (
      let tup = ((1, 2), "hello")
      let result = match tup:
        (inner, str, extra): $extra  # 3 elements for 2-tuple
        _: ""
    )

  test "nested 3-tuple outer with 2 elements should not compile":
    check shouldNotCompile (
      let tup = ((1, 2), "hello", 3.14)
      let result = match tup:
        (inner, str): str  # 2 elements for 3-tuple
        _: ""
    )

  test "deeply nested tuple with wrong outer count should not compile":
    check shouldNotCompile (
      let tup = (((1, 2), (3, 4)), "test")
      let result = match tup:
        (nested, str, extra): $extra  # 3 elements for 2-tuple
        _: ""
    )

# ============================================================================
# SUITE 6: Empty Tuples
# ============================================================================

suite "Negative Tests: Empty Tuple Patterns":

  test "1-tuple with empty pattern should not compile":
    check shouldNotCompile (
      let tup = (42,)
      let result = match tup:
        (): "empty"  # 0 elements for 1-tuple
        _: ""
    )

  test "2-tuple with empty pattern should not compile":
    check shouldNotCompile (
      let tup = (1, 2)
      let result = match tup:
        (): "empty"  # 0 elements for 2-tuple
        _: ""
    )

  test "3-tuple with empty pattern should not compile":
    check shouldNotCompile (
      let tup = (1, 2, 3)
      let result = match tup:
        (): "empty"  # 0 elements for 3-tuple
        _: ""
    )

# ============================================================================
# SUITE 7: Extreme Mismatches
# ============================================================================

suite "Negative Tests: Extreme Element Count Mismatches":

  test "1-tuple with 10-element pattern should not compile":
    check shouldNotCompile (
      let tup = (1,)
      let result = match tup:
        (a, b, c, d, e, f, g, h, i, j): a + b + c + d + e + f + g + h + i + j
        _: 0
    )

  test "10-tuple with 1-element pattern should not compile":
    check shouldNotCompile (
      let tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
      let result = match tup:
        (a): a  # 1 element for 10-tuple
        _: 0
    )

  test "5-tuple with 15-element pattern should not compile":
    check shouldNotCompile (
      let tup = (1, 2, 3, 4, 5)
      let result = match tup:
        (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o): a + b + c + d + e
        _: 0
    )
