#!/usr/bin/env nim c -r
# run_scan_for_tests.nim - Regenerates test/run_all_tests.nim with auto-discovered tests

import std/[os, strutils, sequtils, algorithm]

proc findTestFiles(dir: string): seq[string] =
  ## Find all test_*.nim files in a directory
  result = @[]
  
  if not dirExists(dir):
    return
  
  for path in walkDirRec(dir):
    if path.endsWith(".nim"):
      let filename = extractFilename(path)
      # Include only test_*.nim files, exclude runners
      if filename.startsWith("test_"):
        let relativePath = path.relativePath(getCurrentDir())
        result.add(relativePath)

proc pathToModuleName(filePath: string): string =
  ## Convert file path to Nim module name
  ## test/test_basic.nim -> test_basic
  ## test/func/test_async.nim -> func.test_async
  result = filePath.replace(".nim", "")
  # Remove leading test/ or test.
  if result.startsWith("test."):
    result = result[5..^1]
  elif result.startsWith("test/"):
    result = result[5..^1]

proc generateTestRunner(): string =
  ## Generate the complete run_all_tests.nim content
  
  # Find all test files (run from root directory)
  let mainTestFiles = findTestFiles("test").filterIt(not ("/func/" in it))
  let funcTestFiles = findTestFiles("test/func")
  
  let allTestFiles = (mainTestFiles & funcTestFiles).sorted()
  
  var content = """# Auto-generated test runner - DO NOT EDIT MANUALLY
# Generated by: ./test/run_scan_for_tests.nim
# To regenerate: nim c -r test/run_scan_for_tests.nim

echo "PATTERN MATCHING TEST RUNNER"
echo "============================"
echo "Auto-generated test imports from ./test/ and ./test/func/ directories"
echo ""

# Main test directory imports (""" & $mainTestFiles.len & """ files)
"""

  # Add main test imports at top level
  # Note: Type name collisions are prevented by file-path based metadata cache
  for testFile in mainTestFiles.sorted():
    let moduleName = pathToModuleName(testFile)
    content &= "import " & moduleName & "\n"

  if funcTestFiles.len > 0:
    content &= "\n# Function pattern test directory imports (" & $funcTestFiles.len & " files)\n"
    # Add function test imports
    for testFile in funcTestFiles.sorted():
      let moduleName = pathToModuleName(testFile)
      content &= "import " & "\"" & moduleName & "\"" & "\n"

  content &= "\n"
  content &= "echo \"\"\n"
  content &= "echo \"All test files imported and executed.\"\n"
  content &= "echo \"Total test count: " & $allTestFiles.len & " (" & $mainTestFiles.len & " data pattern + " & $funcTestFiles.len & " function pattern tests)\"\n"
  content &= "echo \"\"\n"
  content &= "echo \"Test files discovered:\"\n"

  # Add discovered file list for documentation
  for testFile in allTestFiles:
    content &= "echo \"  - " & testFile & "\"\n"

  content &= "echo \"\"\n"
  content &= "echo \"To regenerate this file: nim c -r test/run_scan_for_tests.nim\"\n"

  return content

proc writeTestRunner(content: string): void =
  ## Write the generated content to test/run_all_tests.nim
  let outputFile = "test/run_all_tests.nim"
  
  writeFile(outputFile, content)
  echo "✓ Generated: ", outputFile

proc main(): void =
  echo "POPULATE TEST RUNNER"
  echo "===================="
  echo "Scanning for test files..."
  echo ""
  
  # Find test files (run from root directory)
  let mainTests = findTestFiles("test").filterIt(not ("/func/" in it))
  let funcTests = findTestFiles("test/func")
  
  echo "Found test files:"
  echo "  Main tests (./test/): ", mainTests.len
  for test in mainTests.sorted():
    echo "    - ", test
  
  if funcTests.len > 0:
    echo "  Function tests (./test/func/): ", funcTests.len
    for test in funcTests.sorted():
      echo "    - ", test
  
  echo ""
  echo "Generating run_all_tests.nim..."
  
  # Generate and write the test runner
  let content = generateTestRunner()
  writeTestRunner(content)
  
  echo ""
  echo "✓ Test runner regenerated successfully!"
  echo "  Run tests with: nim c -r test/run_all_tests.nim"

when isMainModule:
  main()